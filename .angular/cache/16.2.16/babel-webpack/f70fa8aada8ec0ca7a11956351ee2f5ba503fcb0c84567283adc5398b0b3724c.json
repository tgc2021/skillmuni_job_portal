{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/forgot-password.service\";\nexport class ForgotPasswordCreateComponent {\n  constructor(fb, router, route, forgotPasswordService) {\n    this.fb = fb;\n    this.router = router;\n    this.route = route;\n    this.forgotPasswordService = forgotPasswordService;\n    this.showPassword = false;\n    this.showConfirmPassword = false;\n    this.isLoading = false;\n    this.errorMessage = '';\n    this.email = '';\n    this.token = '';\n    this.passwordForm = this.fb.group({\n      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$')]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validator: this.passwordMatchValidator\n    });\n  }\n  ngOnInit() {\n    // Get email and token from the service or route params\n    this.forgotPasswordService.email$.subscribe(email => this.email = email || '');\n    this.forgotPasswordService.token$.subscribe(token => this.token = token || '');\n    // In a real app, you might want to validate the token here\n    if (!this.token) {\n      this.router.navigate(['/forgot-password']);\n    }\n  }\n  passwordMatchValidator(g) {\n    return g.get('password')?.value === g.get('confirmPassword')?.value ? null : {\n      'mismatch': true\n    };\n  }\n  togglePasswordVisibility(field) {\n    if (field === 'password') {\n      this.showPassword = !this.showPassword;\n    } else {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    }\n  }\n  get password() {\n    return this.passwordForm.get('password');\n  }\n  get confirmPassword() {\n    return this.passwordForm.get('confirmPassword');\n  }\n  getPasswordErrors() {\n    if (!this.password?.errors) return '';\n    if (this.password.errors['required']) return 'Password is required';\n    if (this.password.errors['minlength']) return 'Password must be at least 8 characters';\n    if (this.password.errors['pattern']) {\n      return 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character';\n    }\n    return '';\n  }\n  onSubmit() {\n    if (this.passwordForm.invalid) {\n      this.passwordForm.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    // Simulate API call\n    setTimeout(() => {\n      try {\n        // In a real app, you would call your auth service here to reset the password\n        // For example:\n        // await this.authService.resetPassword(this.email, this.token, this.passwordForm.value.password);\n        this.router.navigate(['/forgot-password/success']);\n      } catch (error) {\n        this.errorMessage = 'Failed to reset password. Please try again.';\n        console.error('Reset password error:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    }, 1000);\n  }\n  navigateBack() {\n    this.router.navigate(['/forgot-password']);\n  }\n  static {\n    this.ɵfac = function ForgotPasswordCreateComponent_Factory(t) {\n      return new (t || ForgotPasswordCreateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ForgotPasswordService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ForgotPasswordCreateComponent,\n      selectors: [[\"app-forgot-password-create\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 2,\n      vars: 0,\n      template: function ForgotPasswordCreateComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"forgot-password-create works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","ForgotPasswordCreateComponent","constructor","fb","router","route","forgotPasswordService","showPassword","showConfirmPassword","isLoading","errorMessage","email","token","passwordForm","group","password","required","minLength","pattern","confirmPassword","validator","passwordMatchValidator","ngOnInit","email$","subscribe","token$","navigate","g","get","value","togglePasswordVisibility","field","getPasswordErrors","errors","onSubmit","invalid","markAllAsTouched","setTimeout","error","console","navigateBack","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","ActivatedRoute","i3","ForgotPasswordService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","template","ForgotPasswordCreateComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/Users/apple/Desktop/skillmuni-job-portal/src/app/auth/forgot-password/forgot-password-create/forgot-password-create.component.ts","/Users/apple/Desktop/skillmuni-job-portal/src/app/auth/forgot-password/forgot-password-create/forgot-password-create.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ForgotPasswordService } from '../../services/forgot-password.service';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-forgot-password-create',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './forgot-password-create.component.html',\n  styleUrls: ['./forgot-password-create.component.css']\n})\nexport class ForgotPasswordCreateComponent implements OnInit {\n  passwordForm: FormGroup;\n  showPassword = false;\n  showConfirmPassword = false;\n  isLoading = false;\n  errorMessage = '';\n  email = '';\n  token = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private forgotPasswordService: ForgotPasswordService\n  ) {\n    this.passwordForm = this.fb.group({\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$')\n      ]],\n      confirmPassword: ['', Validators.required]\n    }, { validator: this.passwordMatchValidator });\n  }\n\n  ngOnInit() {\n    // Get email and token from the service or route params\n    this.forgotPasswordService.email$.subscribe(email => this.email = email || '');\n    this.forgotPasswordService.token$.subscribe(token => this.token = token || '');\n    \n    // In a real app, you might want to validate the token here\n    if (!this.token) {\n      this.router.navigate(['/forgot-password']);\n    }\n  }\n\n  passwordMatchValidator(g: FormGroup) {\n    return g.get('password')?.value === g.get('confirmPassword')?.value\n      ? null : { 'mismatch': true };\n  }\n\n  togglePasswordVisibility(field: 'password' | 'confirmPassword') {\n    if (field === 'password') {\n      this.showPassword = !this.showPassword;\n    } else {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    }\n  }\n\n  get password() { return this.passwordForm.get('password'); }\n  get confirmPassword() { return this.passwordForm.get('confirmPassword'); }\n\n  getPasswordErrors() {\n    if (!this.password?.errors) return '';\n    \n    if (this.password.errors['required']) return 'Password is required';\n    if (this.password.errors['minlength']) return 'Password must be at least 8 characters';\n    if (this.password.errors['pattern']) {\n      return 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character';\n    }\n    return '';\n  }\n\n  onSubmit() {\n    if (this.passwordForm.invalid) {\n      this.passwordForm.markAllAsTouched();\n      return;\n    }\n\n    this.isLoading = true;\n    this.errorMessage = '';\n\n    // Simulate API call\n    setTimeout(() => {\n      try {\n        // In a real app, you would call your auth service here to reset the password\n        // For example:\n        // await this.authService.resetPassword(this.email, this.token, this.passwordForm.value.password);\n        this.router.navigate(['/forgot-password/success']);\n      } catch (error) {\n        this.errorMessage = 'Failed to reset password. Please try again.';\n        console.error('Reset password error:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    }, 1000);\n  }\n\n  navigateBack() {\n    this.router.navigate(['/forgot-password']);\n  }\n}\n","<p>forgot-password-create works!</p>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}