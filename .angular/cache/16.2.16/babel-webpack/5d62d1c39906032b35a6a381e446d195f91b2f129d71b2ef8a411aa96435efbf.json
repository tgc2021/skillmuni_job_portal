{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\n// Custom validator function for word count\nfunction maxWordsValidator(max) {\n  return control => {\n    if (!control.value) {\n      return null;\n    }\n    const words = control.value.trim().split(/\\s+/);\n    return words.length > max ? {\n      maxWords: {\n        max,\n        actual: words.length\n      }\n    } : null;\n  };\n}\nexport let CompanyProfileComponent = class CompanyProfileComponent {\n  constructor(fb, location, router) {\n    this.fb = fb;\n    this.location = location;\n    this.router = router;\n    this.logoError = false;\n    this.logoPreview = null;\n    this.showSuccessPopup = false;\n    this.countryList = ['India', 'United States', 'United Kingdom', 'Australia', 'Canada'];\n    this.cityList = ['Mumbai', 'Delhi', 'Bangalore', 'New York', 'London', 'Sydney'];\n    this.industryList = ['Technology', 'Finance', 'Healthcare', 'Education', 'Retail'];\n    // Custom dropdown values\n    this.selectedCountry = '';\n    this.selectedCity = '';\n    this.selectedIndustry = '';\n    this.countryDropdownOpen = false;\n    this.cityDropdownOpen = false;\n    this.industryDropdownOpen = false;\n  }\n  ngOnInit() {\n    this.profileForm = this.fb.group({\n      companyName: ['', Validators.required],\n      companyEmail: [{\n        value: '',\n        disabled: true\n      }],\n      companyWebsite: ['', [Validators.required, Validators.pattern(/^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$|^https?:\\/\\/(?:localhost|127\\.0\\.0\\.1)(?::\\d{1,5})?(?:\\/[^\\s]*)?$/i)]],\n      companyLogo: [null],\n      country: ['', Validators.required],\n      city: ['', Validators.required],\n      industry: ['', Validators.required],\n      size: ['', Validators.required],\n      contactName: ['', Validators.required],\n      contactEmail: ['', [Validators.required, Validators.email]],\n      about: ['', [maxWordsValidator(100)]]\n    });\n    // Optional: Sync dropdowns if pre-filled\n    this.selectedCountry = this.profileForm.get('country')?.value || '';\n    this.selectedCity = this.profileForm.get('city')?.value || '';\n    this.selectedIndustry = this.profileForm.get('industry')?.value || '';\n  }\n  onLogoChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const validTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n      if (!validTypes.includes(file.type)) {\n        this.logoError = true;\n        this.logoPreview = null;\n        this.profileForm.patchValue({\n          companyLogo: null\n        });\n        return;\n      } else {\n        this.logoError = false;\n        const reader = new FileReader();\n        reader.onload = () => this.logoPreview = reader.result;\n        reader.readAsDataURL(file);\n        this.profileForm.patchValue({\n          companyLogo: file\n        });\n      }\n    } else {\n      this.logoError = false;\n      this.logoPreview = null;\n      this.profileForm.patchValue({\n        companyLogo: null\n      });\n    }\n  }\n  onSubmit() {\n    console.log('Form Status:', this.profileForm.valid);\n    console.log(this.profileForm.getRawValue());\n    if (this.profileForm.valid) {\n      this.showSuccessPopup = true;\n    } else {\n      this.profileForm.markAllAsTouched();\n    }\n  }\n  // Custom Dropdown Handlers\n  toggleCountryDropdown() {\n    this.countryDropdownOpen = !this.countryDropdownOpen;\n    this.cityDropdownOpen = false;\n    this.industryDropdownOpen = false;\n  }\n  // Getter for word count in the about field\n  get aboutWordCount() {\n    const aboutText = this.profileForm.get('about')?.value || '';\n    return aboutText.trim() ? aboutText.trim().split(/\\s+/).length : 0;\n  }\n  // Check if word count is exceeded\n  get isWordCountExceeded() {\n    return this.aboutWordCount > 100;\n  }\n  toggleCityDropdown() {\n    this.cityDropdownOpen = !this.cityDropdownOpen;\n    this.countryDropdownOpen = false;\n    this.industryDropdownOpen = false;\n  }\n  toggleIndustryDropdown() {\n    this.industryDropdownOpen = !this.industryDropdownOpen;\n    this.countryDropdownOpen = false;\n    this.cityDropdownOpen = false;\n  }\n  selectCountry(country) {\n    this.selectedCountry = country;\n    this.profileForm.get('country')?.setValue(country);\n    this.countryDropdownOpen = false;\n  }\n  selectCity(city) {\n    this.selectedCity = city;\n    this.profileForm.get('city')?.setValue(city);\n    this.cityDropdownOpen = false;\n  }\n  selectIndustry(industry) {\n    this.selectedIndustry = industry;\n    this.profileForm.get('industry')?.setValue(industry);\n    this.industryDropdownOpen = false;\n  }\n  goToDashboard() {\n    // Example navigation â€” adjust route as per your app\n    this.showSuccessPopup = false;\n    window.location.href = '/dashboard'; // Or use Angular Router if available\n  }\n};\n\nCompanyProfileComponent = __decorate([Component({\n  selector: 'app-company-profile',\n  templateUrl: './company-profile.component.html',\n  styleUrls: ['./company-profile.component.css']\n})], CompanyProfileComponent);","map":{"version":3,"names":["Component","Validators","maxWordsValidator","max","control","value","words","trim","split","length","maxWords","actual","CompanyProfileComponent","constructor","fb","location","router","logoError","logoPreview","showSuccessPopup","countryList","cityList","industryList","selectedCountry","selectedCity","selectedIndustry","countryDropdownOpen","cityDropdownOpen","industryDropdownOpen","ngOnInit","profileForm","group","companyName","required","companyEmail","disabled","companyWebsite","pattern","companyLogo","country","city","industry","size","contactName","contactEmail","email","about","get","onLogoChange","event","file","target","files","validTypes","includes","type","patchValue","reader","FileReader","onload","result","readAsDataURL","onSubmit","console","log","valid","getRawValue","markAllAsTouched","toggleCountryDropdown","aboutWordCount","aboutText","isWordCountExceeded","toggleCityDropdown","toggleIndustryDropdown","selectCountry","setValue","selectCity","selectIndustry","goToDashboard","window","href","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/apple/Desktop/skillmuni-job-portal/src/app/company-profile/company-profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { HostListener } from '@angular/core';\nimport { Router } from '@angular/router';\n// Custom validator function for word count\nfunction maxWordsValidator(max: number) {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (!control.value) {\n      return null;\n    }\n    const words = control.value.trim().split(/\\s+/);\n    return words.length > max ? { maxWords: { max, actual: words.length } } : null;\n  };\n}\n\n@Component({\n  selector: 'app-company-profile',\n  templateUrl: './company-profile.component.html',\n  styleUrls: ['./company-profile.component.css']\n})\nexport class CompanyProfileComponent implements OnInit {\n  logoError: boolean = false;\n  profileForm!: FormGroup;\n  logoPreview: string | ArrayBuffer | null = null;\n  showSuccessPopup: boolean = false;\n  countryList = ['India', 'United States', 'United Kingdom', 'Australia', 'Canada'];\n  cityList = ['Mumbai', 'Delhi', 'Bangalore', 'New York', 'London', 'Sydney'];\n  industryList = ['Technology', 'Finance', 'Healthcare', 'Education', 'Retail'];\n\n  // Custom dropdown values\n  selectedCountry: string = '';\n  selectedCity: string = '';\n  selectedIndustry: string = '';\n\n  countryDropdownOpen = false;\n  cityDropdownOpen = false;\n  industryDropdownOpen = false;\n\n  constructor(private fb: FormBuilder, private location: Location, private router: Router) {}\n\n  ngOnInit() {\n    this.profileForm = this.fb.group({\n      companyName: ['', Validators.required],\n      companyEmail: [{ value: '', disabled: true }],\n      companyWebsite: ['', [\n        Validators.required,\n        Validators.pattern(/^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$|^https?:\\/\\/(?:localhost|127\\.0\\.0\\.1)(?::\\d{1,5})?(?:\\/[^\\s]*)?$/i)\n      ]],\n      companyLogo: [null],\n      country: ['', Validators.required],\n      city: ['', Validators.required],\n      industry: ['', Validators.required],\n      size: ['', Validators.required],\n      contactName: ['', Validators.required],\n      contactEmail: ['', [Validators.required, Validators.email]],\n      about: ['', [maxWordsValidator(100)]]    });\n\n    // Optional: Sync dropdowns if pre-filled\n    this.selectedCountry = this.profileForm.get('country')?.value || '';\n    this.selectedCity = this.profileForm.get('city')?.value || '';\n    this.selectedIndustry = this.profileForm.get('industry')?.value || '';\n    \n  }\n\n  onLogoChange(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      const validTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n      if (!validTypes.includes(file.type)) {\n        this.logoError = true;\n        this.logoPreview = null;\n        this.profileForm.patchValue({ companyLogo: null });\n        return;\n      } else {\n        this.logoError = false;\n        const reader = new FileReader();\n        reader.onload = () => (this.logoPreview = reader.result);\n        reader.readAsDataURL(file);\n        this.profileForm.patchValue({ companyLogo: file });\n      }\n    } else {\n      this.logoError = false;\n      this.logoPreview = null;\n      this.profileForm.patchValue({ companyLogo: null });\n    }\n  }\n\n  onSubmit() {\n    console.log('Form Status:', this.profileForm.valid);\n    console.log(this.profileForm.getRawValue());\n  \n    if (this.profileForm.valid) {\n      this.showSuccessPopup = true;\n    } else {\n      this.profileForm.markAllAsTouched();\n    }\n  }\n  \n\n  // Custom Dropdown Handlers\n  toggleCountryDropdown() {\n    this.countryDropdownOpen = !this.countryDropdownOpen;\n    this.cityDropdownOpen = false;\n    this.industryDropdownOpen = false;\n  }\n\n  // Getter for word count in the about field\n  get aboutWordCount(): number {\n    const aboutText = this.profileForm.get('about')?.value || '';\n    return aboutText.trim() ? aboutText.trim().split(/\\s+/).length : 0;\n  }\n\n  // Check if word count is exceeded\n  get isWordCountExceeded(): boolean {\n    return this.aboutWordCount > 100;\n  }\n\n  toggleCityDropdown() {\n    this.cityDropdownOpen = !this.cityDropdownOpen;\n    this.countryDropdownOpen = false;\n    this.industryDropdownOpen = false;\n  }\n\n  toggleIndustryDropdown() {\n    this.industryDropdownOpen = !this.industryDropdownOpen;\n    this.countryDropdownOpen = false;\n    this.cityDropdownOpen = false;\n  }\n\n  selectCountry(country: string) {\n    this.selectedCountry = country;\n    this.profileForm.get('country')?.setValue(country);\n    this.countryDropdownOpen = false;\n  }\n\n  selectCity(city: string) {\n    this.selectedCity = city;\n    this.profileForm.get('city')?.setValue(city);\n    this.cityDropdownOpen = false;\n  }\n\n  selectIndustry(industry: string) {\n    this.selectedIndustry = industry;\n    this.profileForm.get('industry')?.setValue(industry);\n    this.industryDropdownOpen = false;\n  }\n\n  goToDashboard() {\n    // Example navigation â€” adjust route as per your app\n    this.showSuccessPopup = false;\n    window.location.href = '/dashboard'; // Or use Angular Router if available\n  }\n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}